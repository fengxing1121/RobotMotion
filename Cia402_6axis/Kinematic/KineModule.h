///////////////////////////////////////////////////////////////////////////////
// KineModule.h
#pragma once

#include "KinematicInterfaces.h"
#include <vector>
using namespace TC_VECTOR_NAMESPACE;
typedef vector<vector<double>> Array;//¶þÎ¬doubleÊý×é
typedef vector<double> Theta;
class CKineModule 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_KinematicCKineModule)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CKineModule();
	virtual	~CKineModule();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	KineModuleParameter m_Parameter;
	KineModuleInputs m_Inputs;
	KineModuleOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	// TODO: Custom variable
	Array DataBase, DataBase1;
	Array PoseArrayNow, T1, T2;
	UINT SizeData;
	UINT m_counter;
	bool LineTrajOK, CTrajOK;
};
