///////////////////////////////////////////////////////////////////////////////
// KineModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "KineModule.h"
#include "Kinematic.h"
#include "Trajplanning.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CKineModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CKineModule
BEGIN_INTERFACE_MAP(CKineModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CKineModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CKineModule)
IMPLEMENT_ITCADI(CKineModule)
IMPLEMENT_ITCWATCHSOURCE(CKineModule)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CKineModule 
BEGIN_SETOBJPARA_MAP(CKineModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_KineModuleParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CKineModule 
BEGIN_GETOBJPARA_MAP(CKineModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_KineModuleParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CKineModule
BEGIN_OBJPARAWATCH_MAP(CKineModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CKineModule
BEGIN_OBJDATAAREA_MAP(CKineModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_KineModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_KineModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CKineModule::CKineModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CKineModule::~CKineModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CKineModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CKineModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CKineModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CKineModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CKineModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CKineModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	Kinematic kine;
	Trajplanning traj;
	double Ratio[6] = { 121.0, 160.68, 101.81, 99.69, 64.56, 49.99 };//底座->抓手//{ 49.99, 64.56, 99.69, 101.81, 160.68, 121.0 };


	if (m_Inputs.PosRun == false)
	{
		for (int i = 0; i < 6; i++)
			InData[i] = m_Inputs.InAngle[i] / Ratio[i];//Inputs --> InData
		
		Theta Angle_Now(6,0);
		for (int i = 0; i < 6; i++)
			Angle_Now[i] = InData[i] * 0.03491;//InData -- > Angle

		Angle_Last = Angle_Now;//Angle_Now --> Angle_Last

		T = kine.Fkine_Step(Angle_Now);

		for (int i = 0; i < 3; i++)
			m_Outputs.OutPos[i] = T[i][3];
	}

	if (m_Inputs.PosRun == true)
	{
		if ((m_counter < SizeData)&&(m_Outputs.ExtPosOK == false))
		{		
			T2 = T;
			T2[0][3] = DataBase[0][m_counter];
			T2[1][3] = DataBase[1][m_counter];
			T2[2][3] = DataBase[2][m_counter];
			m_counter++;
			Theta outangle(6, 0);
			outangle = kine.Ikine_Step(T2, Angle_Last);

			for (int i = 0; i < 6; i++)
			{
				OutData[i] = outangle[i] * 28.6479;//0->5底座到抓手
				m_Outputs.OutAngle[i] = OutData[i] * Ratio[i];
			}
		}
		else 
		{			
			m_Outputs.ExtPosOK = true;
		}
	}


	if (m_Inputs.TrajRun == true)
	{
		T1 = T;
		T1[0][3] = m_Inputs.InPos[0];
		T1[1][3] = m_Inputs.InPos[1];
		T1[2][3] = m_Inputs.InPos[2];
		double L = sqrt_(pow_(T1[0][3], 2) + pow_(T1[1][3], 2) + pow_(T1[2][3], 2));//运动距离
		SizeData = ceil_(L / (0.2*0.001)) + 1;//计算插补数量

		DataBase = traj.MoveLine(T, T1, 0.2, 0.1, 0.001);
		m_Outputs.ExtPosOK = false;
		m_counter = 0;
	}


	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CKineModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CKineModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

