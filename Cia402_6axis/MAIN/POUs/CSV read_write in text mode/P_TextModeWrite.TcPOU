<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="P_TextModeWrite" Id="{fb25ce16-634e-49ae-8973-412dcfc474bb}" SpecialFunc="None">
    <Declaration><![CDATA[(* Writing of CSV file in text mode. None of the field value is containing any non-printing control characters like line feed, carriage return, quotation marks, semicolon... *)
PROGRAM P_TextModeWrite
VAR
	bWrite			: BOOL := FALSE;(* Rising edge starts program execution *)
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sFileName		: T_MaxString := 'C:\Temp\TextModeGen.csv';(* CSV destination file path and name *)
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFilePuts		: FB_FilePuts;(* Writes one record (line) *)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)

	database		: ARRAY[0..MAX_CSV_ROWS, 0..MAX_CSV_COLUMNS ] OF STRING(MAX_CSV_FIELD_LENGTH) :=[ (* Source PLC database *)
'0','0','0','0','0','0',
'1','1','1','1','1','1',
'2','2','2','2','2','2',
'3','3','3','3','3','3',
'4','4','4','4','4','4',
'5','5','5','5','5','5',
'6','6','6','6','6','6',
'7','7','7','7','7','7',
'8','8','8','8','8','8',
'9','9','9','9','9','9',
'10','10','10','10','10','10',
'11','11','11','11','11','11',
'12','12','12','12','12','12',
'13','13','13','13','13','13',
'14','14','14','14','14','14',
'15','15','15','15','15','15',
'16','16','16','16','16','16',
'17','17','17','17','17','17',
'18','18','18','18','18','18',
'19','19','19','19','19','19',
'20','20','20','20','20','20',
'21','21','21','21','21','21',
'22','22','22','22','22','22',
'23','23','23','23','23','23',
'24','24','24','24','24','24',
'25','25','25','25','25','25',
'26','26','26','26','26','26',
'27','27','27','27','27','27',
'28','28','28','28','28','28',
'29','29','29','29','29','29',
'30','30','30','30','30','30',
'31','31','31','31','31','31',
'32','32','32','32','32','32',
'33','33','33','33','33','33',
'34','34','34','34','34','34',
'35','35','35','35','35','35',
'36','36','36','36','36','36',
'37','37','37','37','37','37',
'38','38','38','38','38','38',
'39','39','39','39','39','39',
'40','40','40','40','40','40',
'41','41','41','41','41','41',
'42','42','42','42','42','42',
'43','43','43','43','43','43',
'44','44','44','44','44','44',
'45','45','45','45','45','45',
'46','46','46','46','46','46',
'47','47','47','47','47','47',
'48','48','48','48','48','48',
'49','49','49','49','49','49',
'50','50','50','50','50','50',
'51','51','51','51','51','51',
'52','52','52','52','52','52',
'53','53','53','53','53','53',
'54','54','54','54','54','54',
'55','55','55','55','55','55',
'56','56','56','56','56','56',
'57','57','57','57','57','57',
'58','58','58','58','58','58',
'59','59','59','59','59','59',
'60','60','60','60','60','60',
'61','61','61','61','61','61',
'62','62','62','62','62','62',
'63','63','63','63','63','63',
'64','64','64','64','64','64',
'65','65','65','65','65','65',
'66','66','66','66','66','66',
'67','67','67','67','67','67',
'68','68','68','68','68','68',
'69','69','69','69','69','69',
'70','70','70','70','70','70',
'71','71','71','71','71','71',
'72','72','72','72','72','72',
'73','73','73','73','73','73',
'74','74','74','74','74','74',
'75','75','75','75','75','75',
'76','76','76','76','76','76',
'77','77','77','77','77','77',
'78','78','78','78','78','78',
'79','79','79','79','79','79',
'80','80','80','80','80','80',
'81','81','81','81','81','81',
'82','82','82','82','82','82',
'83','83','83','83','83','83',
'84','84','84','84','84','84',
'85','85','85','85','85','85',
'86','86','86','86','86','86',
'87','87','87','87','87','87',
'88','88','88','88','88','88',
'89','89','89','89','89','89',
'90','90','90','90','90','90',
'91','91','91','91','91','91',
'92','92','92','92','92','92',
'93','93','93','93','93','93',
'94','94','94','94','94','94',
'95','95','95','95','95','95',
'96','96','96','96','96','96',
'97','97','97','97','97','97',
'98','98','98','98','98','98',
'99','99','99','99','99','99',
'100','100','100','100','100','100',
'101','101','101','101','101','101',
'102','102','102','102','102','102',
'103','103','103','103','103','103',
'104','104','104','104','104','104',
'105','105','105','105','105','105',
'106','106','106','106','106','106',
'107','107','107','107','107','107',
'108','108','108','108','108','108',
'109','109','109','109','109','109',
'110','110','110','110','110','110',
'111','111','111','111','111','111',
'112','112','112','112','112','112',
'113','113','113','113','113','113',
'114','114','114','114','114','114',
'115','115','115','115','115','115',
'116','116','116','116','116','116',
'117','117','117','117','117','117',
'118','118','118','118','118','118',
'119','119','119','119','119','119',
'120','120','120','120','120','120',
'121','121','121','121','121','121',
'122','122','122','122','122','122',
'123','123','123','123','123','123',
'124','124','124','124','124','124',
'125','125','125','125','125','125',
'126','126','126','126','126','126',
'127','127','127','127','127','127',
'128','128','128','128','128','128',
'129','129','129','129','129','129',
'130','130','130','130','130','130',
'131','131','131','131','131','131',
'132','132','132','132','132','132',
'133','133','133','133','133','133',
'134','134','134','134','134','134',
'135','135','135','135','135','135',
'136','136','136','136','136','136',
'137','137','137','137','137','137',
'138','138','138','138','138','138',
'139','139','139','139','139','139',
'140','140','140','140','140','140',
'141','141','141','141','141','141',
'142','142','142','142','142','142',
'143','143','143','143','143','143',
'144','144','144','144','144','144',
'145','145','145','145','145','145',
'146','146','146','146','146','146',
'147','147','147','147','147','147',
'148','148','148','148','148','148',
'149','149','149','149','149','149',
'150','150','150','150','150','150',
'151','151','151','151','151','151',
'152','152','152','152','152','152',
'153','153','153','153','153','153',
'154','154','154','154','154','154',
'155','155','155','155','155','155',
'156','156','156','156','156','156',
'157','157','157','157','157','157',
'158','158','158','158','158','158',
'159','159','159','159','159','159',
'160','160','160','160','160','160',
'161','161','161','161','161','161',
'162','162','162','162','162','162',
'163','163','163','163','163','163',
'164','164','164','164','164','164',
'165','165','165','165','165','165',
'166','166','166','166','166','166',
'167','167','167','167','167','167',
'168','168','168','168','168','168'];

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[bWrite:=MAIN.P_TextModeWrite_WriteTrigger;
sFileName:=MAIN.P_TextModeWrite_WriteFilePath;

CASE step OF
	0:	(* Wait for rising edge at bWrite variable *)
		IF bWrite THEN
			bWrite 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 0;
			nColumn	:= 0;
			step 	:= 1;
		END_IF

	1:	(* Open source file *)
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( sNetId := sNetId, sPathName := sFileName, nMode := FOPEN_MODEWRITE OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC, bExecute := TRUE );
		step := 2;

	2:(* Wait until open not busy *)
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF

	3:(* Convert one PLC record to CSV format *)
		sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		IF nRow <= MAX_CSV_ROWS THEN

			FOR nColumn := 0 TO MAX_CSV_COLUMNS BY 1 DO

				sCSVField := STRING_TO_CSVFIELD( database[ nRow, nColumn ], FALSE );(* TODO: Get field value from your application *)

				(* Add new field to the record buffer *)
				fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
							bCRLF := ( nColumn = MAX_CSV_COLUMNS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
				IF fbWriter.bOk THEN
					fbWriter.eCmd := eEnumCmd_Next;(* Write next field value *)
				ELSE(* Error *)
					step := 100;
					RETURN;
				END_IF

			END_FOR(* FOR nColumn := 0... *)

			(* FB_FilePuts adds allready CR (carriage return) to the written line.
			We have to replace the $R$L characters with $L character to avoid double CR. *)
			IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
				sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
			END_IF

			nRow := nRow + 1;(* Increment number of created records (rows) *)
			step := 4;(* Write record to the file *)

		ELSE(* All rows written => Close file *)
			step := 10;
		END_IF

	4:	(* Write single text line *)
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		step := 5;

	5:(* Wait until write not busy *)
		fbFilePuts( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				step := 3;(* Write next record *)
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF

	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 11;

	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF

	100: (* Error or ready step => cleanup *)
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
		END_IF

END_CASE



]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>