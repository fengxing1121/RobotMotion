///////////////////////////////////////////////////////////////////////////////
// KineModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "KineModule.h"
#include "Kinematic.h"
#include "Trajplanning.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CKineModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CKineModule
BEGIN_INTERFACE_MAP(CKineModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CKineModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CKineModule)
IMPLEMENT_ITCADI(CKineModule)
IMPLEMENT_ITCWATCHSOURCE(CKineModule)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CKineModule 
BEGIN_SETOBJPARA_MAP(CKineModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_KineModuleParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CKineModule 
BEGIN_GETOBJPARA_MAP(CKineModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_KineModuleParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CKineModule
BEGIN_OBJPARAWATCH_MAP(CKineModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CKineModule
BEGIN_OBJDATAAREA_MAP(CKineModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_KineModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_KineModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CKineModule::CKineModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CKineModule::~CKineModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CKineModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CKineModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CKineModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CKineModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CKineModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CKineModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	Kinematic kine;
	Trajplanning traj;
	Theta Angle_Now(6, 0);
	Theta Angle_Now_Arc(6, 0);
	Theta Angle_Last_Arc(6, 0);
	switch (m_Inputs.KineModlueJob)
	{
		case 0://Module_Idle
		{
			for (int i = 0; i < 6; i++)
				Angle_Now[i] = m_Inputs.InAngle[i];//从PLC拿到实时角度

			for (int i = 0; i < 6; i++)
				Angle_Now_Arc[i] = Angle_Now[i] * 0.017453;//转到弧度

			for (int i = 0; i < 6; i++)
				m_Outputs.OutAngle[i] = Angle_Now[i];//保持当前关节量不变

			Angle_Last_Arc = Angle_Now_Arc;

			PoseArrayNow = kine.Fkine_Step(Angle_Now_Arc);//正解出实时位置

			for (int i = 0; i < 3; i++)
				m_Outputs.Pos_Now[i] = PoseArrayNow[i][3];

			m_Outputs.ExtPosOK = false;
			m_Outputs.ExtPosReady = false;
			m_counter = 0;
		}break;
		case 1://CartesianMovePlanning
		{
			for (int i = 0; i < 6; i++)
				Angle_Now[i] = m_Inputs.InAngle[i];//从PLC拿到实时角度


			for (int i = 0; i < 6; i++)
				m_Outputs.OutAngle[i] = Angle_Now[i];//保持当前关节量不变


			double xtrans = m_Inputs.CPos[0] - PoseArrayNow[0][3];
			double ytrans = m_Inputs.CPos[1] - PoseArrayNow[1][3];
			double ztrans = m_Inputs.CPos[2] - PoseArrayNow[2][3];
			double L = sqrt_(pow_(xtrans, 2) + pow_(ytrans, 2) + pow_(ztrans, 2)); //distance

			SizeData = ceil_(L / (m_Inputs.CSpeed*PlcCycle));//计算插补数量
			
			double AcclerationTime = 0.5;

			if (SizeData > 0)
			{
				DataBase = traj.CartesianMove(m_Inputs.CPos[0], m_Inputs.CPos[1], m_Inputs.CPos[2], Angle_Now, PoseArrayNow, m_Inputs.CSpeed, AcclerationTime, PlcCycle);

				CTrajOK = true;
			}

			m_Outputs.ExtPosOK = false;
			m_Outputs.ExtPosReady = false;
			m_counter = 0;
			m_Inputs.KineModlueJob = 0;//back to idle
		}break;
		case 2://LineMovePlanning
		{
			T1 = PoseArrayNow;
			T1[0][3] = m_Inputs.InPos[0];
			T1[1][3] = m_Inputs.InPos[1];
			T1[2][3] = m_Inputs.InPos[2];
			double L = sqrt_(pow_(T1[0][3], 2) + pow_(T1[1][3], 2) + pow_(T1[2][3], 2));//运动距离

			SizeData = ceil_(L / (m_Inputs.LineSpeed*PlcCycle));//计算插补数量

			double AcclerationTime = 0.5;

			if (SizeData > 0)
			{
				DataBase1 = traj.MoveLine(PoseArrayNow, T1, m_Inputs.LineSpeed, AcclerationTime, PlcCycle);

				LineTrajOK = true;
			}

			m_Outputs.ExtPosOK = false;
			m_Outputs.ExtPosReady = false;
			m_counter = 0;
			m_Inputs.KineModlueJob = 0;//back to idle
		}break;
		case 3://CartesianMove
		{
			if ((m_counter < SizeData) && (m_Outputs.ExtPosOK == false) && (CTrajOK == true))
			{
				for (int i = 0; i < 6; i++)
				{
					m_Outputs.OutAngle[i] = DataBase[i][m_counter];					
				}
				m_counter++;
				m_Outputs.ExtPosReady = true;
			}
			else
			{
				CTrajOK = false;
				m_Outputs.ExtPosOK = true;
				m_Outputs.ExtPosReady = false;
				m_Inputs.KineModlueJob = 0;//back to idle
			}
		}break;
		case 4://LineMove
		{
			if ((m_counter < SizeData) && (m_Outputs.ExtPosOK == false) && (LineTrajOK == true))
			{
				T2 = PoseArrayNow;

				T2[0][3] = DataBase1[0][m_counter];
				T2[1][3] = DataBase1[1][m_counter];
				T2[2][3] = DataBase1[2][m_counter];				

				Theta outangle(6, 0);
				outangle = kine.Ikine_Step(T2, Angle_Last_Arc);
				Angle_Last_Arc = outangle;

				for (int i = 0; i < 6; i++)
				{
					m_Outputs.OutAngle[i] = outangle[i] * 57.3;
				}

				m_counter++;
				m_Outputs.ExtPosReady = true;
			}
			else
			{
				LineTrajOK = false;
				m_Outputs.ExtPosOK = true;
				m_Outputs.ExtPosReady = false;
				m_Inputs.KineModlueJob = 0;//back to idle
			}
		}break;
		default:
		break;
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CKineModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CKineModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

